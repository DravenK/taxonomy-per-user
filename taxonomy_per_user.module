<?php

/**
 * @file
 * Contains Drupal\taxonomy_per_user\taxonomy_per_user.module.
 */

use Drupal\taxonomy\Entity\Vocabulary;
use Symfony\Component\Routing\Route;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\taxonomy_per_user\TaxonomyPerUserAccessCheck;

/**
 * Implements hook_entity_type_alter().
 */
function taxonomy_per_user_entity_type_alter(array &$entity_types) {
  /* @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['taxonomy_vocabulary']->setHandlerClass('list_builder', 'Drupal\taxonomy_per_user\VocabularyListBuilder');
}

/**
 * Route access callback.
 */
function taxonomy_per_user_route_access(Route $route, RouteMatchInterface $match, AccountInterface $account) {
  $op = $route->getOption('op');
  $vocabulary = $match->getParameter('taxonomy_vocabulary');
  $term_id = $match->getRawParameters()->getDigits('taxonomy_term');

  if (is_null($vocabulary) && !empty($term_id)) {
    $vocabulary_id = Term::load($term_id)->bundle();

    if (TaxonomyPerUserAccessCheck::vocabularyTermCheckAccess($op, $vocabulary_id, $account)->isAllowed()
      || TaxonomyPerUserAccessCheck::checkCreatorAccess($op, $vocabulary_id)->isAllowed()) {
      return AccessResult::allowed();
    }
    return AccessResult::forbidden();

  }
  elseif ($vocabulary && is_string($vocabulary)) {
    $vocabulary = Vocabulary::load($vocabulary);
    $vocabulary_id = $vocabulary->id();
  }
  elseif (!$vocabulary) {
    // Do nothing when vocab is null.
    $vocabulary_id = NULL;
  }
  else {
    $vocabulary_id = $vocabulary->id();
  }

  if (TaxonomyPerUserAccessCheck::checkCreatorAccess($op, $vocabulary_id)->isAllowed()) {
    return AccessResult::allowed();
  }

  return AccessResult::forbidden();

}

/**
 * Implements hook_entity_access().
 */
function taxonomy_per_user_entity_access(EntityInterface $entity) {
  $entity_type_id = $entity->getEntityTypeId();
  if ($entity_type_id == 'taxonomy_vocabulary' || ($entity_type_id == 'taxonomy_term'
    && TaxonomyPerUserAccessCheck::checkCreatorAccess('', $entity->getConfigTarget()))
   ) {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}
